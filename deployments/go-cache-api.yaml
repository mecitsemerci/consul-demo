
---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: go-cache-api          # Name of the Kubernetes resource
spec:
  replicas: 3                    # Number of pods to run at any given time
  selector:
    matchLabels:
      app: go-cache-api       # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: go-cache-api
    spec:                        # Spec for the container which will run in the Pod
      containers:
        - name: go-cache-api
          image: mecitsem/go-cache-api:latest
          imagePullPolicy: Always
          env:
            - name: CONSUL_HTTP_ADDR
              value: "consul-server.consul:8500"
            - name: REDIS_URL
              value: "redis-master:6379"
          ports:
            - containerPort: 8080  # Should match the port number that the Go application listens on
          livenessProbe:           # To check the health of the Pod
            httpGet:
              path: /healthcheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          readinessProbe:          # To check if the Pod is ready or not
            httpGet:
              path: /healthcheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1

---
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  name: go-cache-api-svc   # Name of the resource
spec:
  type: NodePort                 # If you're deploying on cloud, you can use `type: LoadBalancer`. It will automatically provision a load balancer with the cloud provider that will route traffic to your application.
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
    - name: http
      port: 8080 # serve on port 80
      targetPort: 8080 # reach to port 8080 of all the Pods in the selector block
  selector:
    app: go-cache-api          # Map any pod with name go-hello-world to this service